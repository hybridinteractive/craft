const mix = require('laravel-mix');

// Pulls in from the .env file
const host = process.env.BASE_URL;
const publicPath = process.env.MIX_PATH;
const resourcePath = process.env.MIX_RESOURCE_PATH;
const dist = process.env.MIX_DIST_PATH;
const distPath = publicPath + "/" + dist;

//  Sets where the manifest file and hot file go. Need to sync with craft in the mix plugin.
mix.setPublicPath(`${publicPath}`);

// JS and SCSS processing
mix.js(`${resourcePath}` + '/js/main.js', `${distPath}` + '/js');
mix.sass(`${resourcePath}` + '/sass/main.scss', `${distPath}` + '/css');

// Added options for mix
mix.options({
	processCssUrls: false,
})

// Development tasks
if (!mix.inProduction()) {

	// BrowserSync
	mix.browserSync({
		proxy: `${host}`,
		files: [
			'templates/**/**/**/*',
			`${distPath}` + '/**/*.(js|css)',
		],
		open: true,
		watchOptions: {
		},
		notify: false,
		inject: false,
	});

    mix.sourceMaps();
}

// Production build tasks
if (mix.inProduction()) {

	// Vendor Sass
	mix.sass(`${resourcePath}` + '/sass/vendor.scss', `${distPath}` + '/css');

	// Versioning with mix-manifest.json
	mix.version();
}

// Library Code Splitting
mix.extract();

// Create the critial css for inline loading on page
// mix.critical({
// 	enabled: mix.inProduction(),
// 	urls: [
// 		{ src: `${host}` + '/', dest: 'templates/_critical/critical.css' },
// 	],
// 	options: {
// 		inline: false,
// 		width: 1300, //Browser width
// 		height: 900, //Browser height
// 		minify: true, //Minify output.
// 		extract: false,
// 		inlineImages: false, //Inline small images
// 		assetPaths: [
// 		   `${dist}` + '/images', //Inline asset paths.
// 		],
// 		ignore: ['@font-face',/url\(/], //ignore rules.
// 		ignoreOptions: {}
// 	},
// });

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });

// This will prepend var $ = require('jquery') to every location that it encounters either the global $ identifier, window.jQuery, or jQuery
//
// mix.autoload({
// 	jquery: ['$', 'window.jQuery', 'jQuery'],
// });

// This would be for purgecss
//
// require('laravel-mix-purgecss');
// mix.purgeCss({
//     enabled: mix.inProduction(),
//     globs: [
//         path.join(__dirname, '/templates/**/*.{html,twig}'),
//         path.join(__dirname, '/resources/sass/**/*.scss'),
//     ],
//     extensions: ['html', 'js', 'php', 'vue', 'twig', 'scss', 'css'],
//     whitelistPatterns: [/^mask$/,/^form$/,/^field$/,/^heading$/,/$input$/,/^button$/,/^content-builder-blocks/],
//     whitelistPatternsChildren: [/^form$/,/^field$/,/^heading$/,/$input$/,/^button$/],
// })


// This would be for copying directories from resource to dist
//
// mix.copyDirectory(`${resourcePath}` + 'fonts', `${dist}` + 'fonts');
// mix.copyDirectory(`${resourcePath}` + 'vendor', `${dist}` + 'vendor');